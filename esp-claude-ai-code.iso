#include <ESP32Servo.h>

// Servo configuration
Servo left_right;
Servo up_down;
const int panPin = 33;
const int tiltPin = 21;

// Status flags
bool left_right_initialized = false;
bool up_down_initialized = false;

// Timing control
unsigned long lastMoveTime = 0;
const unsigned long MOVE_INTERVAL = 20; // 50Hz max update rate

void setup() {
    Serial.begin(115200);
    while (!Serial) {
        delay(100);
    }
    
    // Initialize servos with error checking
    if (left_right.attach(panPin)) {
        left_right_initialized = true;
        left_right.write(90);
    } else {
        Serial.println("ERROR: Failed to initialize pan servo");
    }
    
    if (up_down.attach(tiltPin)) {
        up_down_initialized = true;
        up_down.write(90);
    } else {
        Serial.println("ERROR: Failed to initialize tilt servo");
    }
    
    if (left_right_initialized && up_down_initialized) {
        Serial.println("Servo control ready");
    } else {
        Serial.println("WARNING: System initialized with errors");
    }
}

void processSerialCommand() {
    String command = Serial.readStringUntil('\n');
    command.trim();
    
    // Parse command string
    int commaIndex = command.indexOf(',');
    if (commaIndex == -1) {
        Serial.println("ERROR: Invalid command format");
        return;
    }
    
    int servoNum = command.substring(0, commaIndex).toInt();
    int angle = command.substring(commaIndex + 1).toInt();
    
    // Validate input
    if (angle < 0 || angle > 180) {
        Serial.println("ERROR: Angle out of range (0-180)");
        return;
    }
    
    // Update appropriate servo
    if (servoNum == 1 && left_right_initialized) {
        left_right.write(angle);
        Serial.println("Pan angle set to: " + String(angle));
    } 
    else if (servoNum == 2 && up_down_initialized) {
        up_down.write(angle);
        Serial.println("Tilt angle set to: " + String(angle));
    }
    else {
        Serial.println("ERROR: Invalid servo number or servo not initialized");
    }
}

void loop() {
    if (Serial.available() > 0) {
        // Ensure minimum time between movements
        if (millis() - lastMoveTime >= MOVE_INTERVAL) {
            processSerialCommand();
            lastMoveTime = millis();
        }
    }
}
