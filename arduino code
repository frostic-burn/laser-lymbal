#include <Keypad.h>
#include <Servo.h>

// Constants for solenoid lock and LEDs
#define SOLENOID_PIN 2
#define MODE_LED_PIN 3
#define ACTIVE_LED_PIN 4

// Servo pins
#define SERVO_X_PIN 5
#define SERVO_Y_PIN 6

// Keypad configuration
const byte ROWS = 4; // 4 rows
const byte COLS = 4; // 4 columns
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, 2};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Servo objects
Servo servoX;
Servo servoY;

// Variables
String enteredPin = "";
const String correctPin = "3777";
bool systemActive = false;
bool laserPaintingMode = true; // Default mode

void setup() {
  pinMode(SOLENOID_PIN, OUTPUT);
  pinMode(MODE_LED_PIN, OUTPUT);
  pinMode(ACTIVE_LED_PIN, OUTPUT);

  servoX.attach(SERVO_X_PIN);
  servoY.attach(SERVO_Y_PIN);

  digitalWrite(SOLENOID_PIN, LOW); // Keep solenoid locked
  digitalWrite(MODE_LED_PIN, LOW);
  digitalWrite(ACTIVE_LED_PIN, LOW);

  Serial.begin(9600); // For communication with ESP32
}

void loop() {
  if (!systemActive) {
    handlePinEntry();
  } else {
    handleModeSwitch();
    if (laserPaintingMode) {
      laserPainting();
    } else {
      handDetectionMode();
    }
  }
}

void handlePinEntry() {
  char key = keypad.getKey();
  if (key) {
    if (key == '#') {
      if (enteredPin == correctPin) {
        systemActive = true;
        digitalWrite(SOLENOID_PIN, HIGH); // Unlock
        digitalWrite(ACTIVE_LED_PIN, HIGH); // Indicate active system
        delay(1000); // Brief unlock period
        digitalWrite(SOLENOID_PIN, LOW); // Lock again
      }
      enteredPin = ""; // Reset PIN entry
    } else if (key == '*') {
      enteredPin = ""; // Clear PIN
    } else {
      enteredPin += key; // Append digit
    }
  }
}

void handleModeSwitch() {
  static bool buttonPressed = false;
  if (digitalRead(MODE_LED_PIN) == HIGH && !buttonPressed) {
    laserPaintingMode = !laserPaintingMode;
    buttonPressed = true;

    if (laserPaintingMode) {
      digitalWrite(MODE_LED_PIN, HIGH);
    } else {
      digitalWrite(MODE_LED_PIN, LOW);
    }
  } else if (digitalRead(MODE_LED_PIN) == LOW) {
    buttonPressed = false;
  }
}

void laserPainting() {
  // Example patterns: Square and Circle
  static int step = 0;
  switch (step) {
    case 0:
      servoX.write(90);
      servoY.write(90);
      delay(500);
      step++;
      break;
    case 1:
      servoX.write(45);
      delay(500);
      step++;
      break;
    case 2:
      servoY.write(45);
      delay(500);
      step++;
      break;
    case 3:
      servoX.write(90);
      delay(500);
      step = 0; // Repeat pattern
      break;
  }
}

void handDetectionMode() {
  if (Serial.available() > 0) {
    String data = Serial.readStringUntil('\n');
    if (data.startsWith("HAND:")) {
      int commaIndex = data.indexOf(',');
      int x = data.substring(5, commaIndex).toInt();
      int y = data.substring(commaIndex + 1).toInt();

      // Map coordinates to servo range
      int servoXPos = map(x, 0, 640, 0, 180);
      int servoYPos = map(y, 0, 480, 0, 180);

      servoX.write(servoXPos);
      servoY.write(servoYPos);
    }
  }
}

